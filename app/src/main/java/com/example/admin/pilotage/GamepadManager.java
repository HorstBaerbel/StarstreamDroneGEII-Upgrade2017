package com.example.admin.pilotage;

import android.view.InputDevice;
import android.view.KeyEvent;
import android.view.MotionEvent;

/**
 * Created by massont on 10/01/2017.
 */

public class GamepadManager {

    public GamepadManager(){

    }




    /**

     * This method gives the state of the button : <i>pressed or released</i>.

     * @param keyEvent
     * The <i>event</i> generated by the action on the button.

     * @return
     * A boolean that is <b>true</b> if the button is pressed and <b>false</b> if it is released.

     */
    public boolean GetKeyState( KeyEvent keyEvent ) {

        boolean bState = false;

        if(keyEvent.getAction() == keyEvent.ACTION_DOWN)
        {
            bState = true;
        }
        else if(keyEvent.getAction() == keyEvent.ACTION_UP)
        {
            bState = false;
        }

        return bState;

    }

    /**

     * This method gives a number of the button that has generated the <i>event</i>.

     * @param keyEvent
     * The <i>event</i> generated by the action on the button.

     * @return
     * An <i>integer</i> that represent the button that has generated the <i>event</i>:
     * <b>0</b> if it is <i>none</i>.
     * <b>1</b> if it is <i>A</i>.
     * <b>2</b> if it is <i>B</i>.
     * <b>3</b> if it is <i>X</i>.
     * <b>4</b> if it is <i>Y</i>.
     * <b>5</b> if it is <i>START</i>.
     * <b>6</b> if it is <i>SELECT</i>.
     * <b>7</b> if it is <i>R1</i>.
     * <b>8</b> if it is <i>L1</i>.
     * <b>9</b> if it is <i>R2</i>.
     * <b>10</b> if it is <i>L2</i>.

     */
    public int GetKey( KeyEvent keyEvent ) {

        int iKey = 0;


        if(keyEvent.getKeyCode() == keyEvent.KEYCODE_BUTTON_A)
        {
            iKey = 1;

        }

        if(keyEvent.getKeyCode() == keyEvent.KEYCODE_BUTTON_B)
        {
            iKey = 2;

        }

        if(keyEvent.getKeyCode() == keyEvent.KEYCODE_BUTTON_X)
        {
            iKey = 3;

        }

        if(keyEvent.getKeyCode() == keyEvent.KEYCODE_BUTTON_Y)
        {
            iKey = 4;

        }

        if(keyEvent.getKeyCode() == keyEvent.KEYCODE_BUTTON_START)
        {
            iKey = 5;

        }

        if(keyEvent.getKeyCode() == keyEvent.KEYCODE_BUTTON_SELECT)
        {
            iKey = 6;

        }

        if(keyEvent.getKeyCode() == keyEvent.KEYCODE_BUTTON_R1)
        {
            iKey = 7;

        }

        if(keyEvent.getKeyCode() == keyEvent.KEYCODE_BUTTON_L1)
        {
            iKey = 8;

        }

        if(keyEvent.getKeyCode() == keyEvent.KEYCODE_BUTTON_R2)
        {

            iKey = 9;
        }

        if(keyEvent.getKeyCode() == keyEvent.KEYCODE_BUTTON_L2)
        {

            iKey = 10;
        }


        return iKey;

    }

    /**

     * This method gives the location of the joystick 1 on its axis x.

     * @param motionEvent
     * The <i>event</i> generated by the action on the joystick.

     * @return
     * A <i>decimal number</i> that is <b>the coordinate of the joystick 1 on its axis x</b>.

     */
    public double GetJ1PosX(MotionEvent motionEvent) {

        double dX = 0;
        float fX;

        if ((motionEvent.getSource() & InputDevice.SOURCE_JOYSTICK) ==
                InputDevice.SOURCE_JOYSTICK &&
                motionEvent.getAction() == MotionEvent.ACTION_MOVE) {

            fX = motionEvent.getAxisValue(MotionEvent.AXIS_X);
            fX = fX * 10;
            dX = (double)fX;

        }

        return dX;

    }

    /**

     * This method gives the location of the joystick 1 on its axis y.

     * @param motionEvent
     * The <i>event</i> generated by the action on the joystick.

     * @return
     * A <i>decimal number</i> that is <b>the coordinate of the joystick 1 on its axis y</b>.

     */
    public double GetJ1PosY(MotionEvent motionEvent) {

        double dY = 0;
        float fY;

        if ((motionEvent.getSource() & InputDevice.SOURCE_JOYSTICK) ==
                InputDevice.SOURCE_JOYSTICK &&
                motionEvent.getAction() == MotionEvent.ACTION_MOVE) {

            fY = motionEvent.getAxisValue(MotionEvent.AXIS_Y);
            fY = fY * 10;
            dY = (double)fY;

        }

        return dY;

    }

    /**

     * This method gives the location of the joystick 2 on its axis x.

     * @param motionEvent
     * The <i>event</i> generated by the action on the joystick.

     * @return
     * A <i>decimal number</i> that is <b>the coordinate of the joystick 2 on its axis x</b>.

     */
    public double GetJ2PosX(MotionEvent motionEvent) {

        double dX = 0;
        float fX;

        if ((motionEvent.getSource() & InputDevice.SOURCE_JOYSTICK) ==
                InputDevice.SOURCE_JOYSTICK &&
                motionEvent.getAction() == MotionEvent.ACTION_MOVE) {

            fX = motionEvent.getAxisValue(MotionEvent.AXIS_Z);
            fX = fX * 10;
            dX = (double)fX;

        }

        return dX;

    }

    /**

     * This method gives the location of the joystick 2 on its axis y.

     * @param motionEvent
     * The <i>event</i> generated by the action on the joystick.

     * @return
     * A <i>decimal number</i> that is <b>the coordinate of the joystick 2 on its axis y</b>.

     */
    public double GetJ2PosY(MotionEvent motionEvent) {

        double dY = 0;
        float fY;

        if ((motionEvent.getSource() & InputDevice.SOURCE_JOYSTICK) ==
                InputDevice.SOURCE_JOYSTICK &&
                motionEvent.getAction() == MotionEvent.ACTION_MOVE) {

            fY = motionEvent.getAxisValue(MotionEvent.AXIS_RZ);
            fY = fY * 10;
            dY = (double)fY;

        }

        return dY;

    }

    /**

     * This method gives a number that represents <b>the direction pressed</b> on the directional pad.

     * @param motionEvent
     * The <i>event</i> generated by the action on the directional pad (considered as a joystick).

     * @return
     * An <i>integer</i> that represent <b>the direction pressed</b> on the directional pad:
     * <b>0</b> if it is <i>none</i>.
     * <b>1</b> if it is <i>UP</i>.
     * <b>2</b> if it is <i>RIGHT</i>.
     * <b>3</b> if it is <i>DOWN</i>.
     * <b>4</b> if it is <i>LEFT</i>.

     */
    public int GetDPad(MotionEvent motionEvent) {

        int iPad = 0;
        float fX;
        float fY;
        int iX;
        int iY;

        if ((motionEvent.getSource() & InputDevice.SOURCE_JOYSTICK) ==
                InputDevice.SOURCE_JOYSTICK &&
                motionEvent.getAction() == MotionEvent.ACTION_MOVE) {

            fX = motionEvent.getAxisValue(MotionEvent.AXIS_HAT_X);
            fY = motionEvent.getAxisValue(MotionEvent.AXIS_HAT_Y);

            iX = (int)fX;
            iY = (int)fY;

            if(iX == 1) //DROITE
            {
                iPad = 2;
            }
            else if(iX == -1) // GAUCHE
            {
                iPad = 4;
            }

            if(iY == 1) // BAS
            {
                iPad = 3;
            }
            else if(iY == -1) //HAUT
            {
                iPad = 1;
            }
        }

        return iPad;

    }
}
